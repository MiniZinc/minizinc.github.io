%% ========= DATA =============
% test example
%
% Architecture:
%
% ___   ___ 
% |1 |--|2 |
% ---   --- 
%  |     |  
% ___   ___ 
% |3 |--|4 |
% ---   --- 

row = 2;
col = 2;

no_links = 2*2*(row-1)*col;

no_actors=5;

no_flows = 7;
link_bandwidth = 305;

source_destination_actor = 
			[| 1, 2 |
			   2, 4 |
			   4, 3 |
			   4, 5 |
			   5, 1 |
			   3, 3 |
			   1, 1
			|];

actor_processor = [flow_processor[1], flow_processor[8], flow_processor[6], flow_processor[13], flow_processor[5]];


inStream = [450, 450, 600, 450, 450, 600, 600];

b = [| 0, 0, 0, 0, inStream[1], -inStream[1] |
       0, 0, 0, 0, inStream[2], -inStream[2] |
       0, 0, 0, 0, inStream[3], -inStream[3] |
       0, 0, 0, 0, inStream[4], -inStream[4] |
       0, 0, 0, 0, inStream[5], -inStream[5] |
       0, 0, 0, 0, inStream[6], -inStream[6] |
       0, 0, 0, 0, inStream[7], -inStream[7] |];

flows = array2d(1..no_flows, 1..m, 
        [inFlow[1,i] | i in 1..k] ++ [commFlow[1,i] | i in 1..no_links] ++ [outFlow[1,i] | i in 1..k] ++
        [inFlow[2,i] | i in 1..k] ++ [commFlow[2,i] | i in 1..no_links] ++ [outFlow[2,i] | i in 1..k] ++
	[inFlow[3,i] | i in 1..k] ++ [commFlow[3,i] | i in 1..no_links] ++ [outFlow[3,i] | i in 1..k] ++
	[inFlow[4,i] | i in 1..k] ++ [commFlow[4,i] | i in 1..no_links] ++ [outFlow[4,i] | i in 1..k] ++
	[inFlow[5,i] | i in 1..k] ++ [commFlow[5,i] | i in 1..no_links] ++ [outFlow[5,i] | i in 1..k] ++
	[inFlow[6,i] | i in 1..k] ++ [commFlow[6,i] | i in 1..no_links] ++ [outFlow[6,i] | i in 1..k] ++
	[inFlow[7,i] | i in 1..k] ++ [commFlow[7,i] | i in 1..no_links] ++ [outFlow[7,i] | i in 1..k] );

balance = array2d(1..no_flows, 1..n, [b[i,j] | i in 1..no_flows, j in 1..n]);

unit_cost = [ 0, 0, 0, 0, 
	    1, 1, 1, 1, 1, 1, 1, 1,
	    0, 0, 0, 0];

processor_load = 200;

% mc, me, vlc, mbe, mbd
actor_load = [70, 70, 70, 70, 70];

load = array2d(1..2, 1..no_flows, 
	[if (not exists (k in 1..i-1) (source_destination_actor[k,j+1] = source_destination_actor[i,j+1] \/ 
	    	 	      	       source_destination_actor[k,((j+1) mod 2) + 1] = source_destination_actor[i,j+1])) 
	    then actor_load[source_destination_actor[i,j+1]] else 0 endif | j in 0..1, i in 1..no_flows]);

arc =[| 
    	%% from action to processors
    	5, 1 |
    	5, 2 |
	5, 3 |
	5, 4 |

	1, 2 |
	1, 3 |

	2, 1 |
	2, 4 |

	3, 1 |
	3, 4 |

	4, 2 |
	4, 3 |
	
	%% from processors to action
	1, 6 |
    	2, 6 |
	3, 6 |
	4, 6 
	|];

in_connections = [if ((i mod 2) mod 2) = 0 then (k+1)+(i div (2*k)) else ((i div 2) mod k + 1) endif | i in 0..2*no_flows*k-1];
out_connections = [if ((i mod 2) mod 2) = 0 then ((i div 2) mod k + 1) else (k+no_flows+1)+(i div (2*k)) endif | i in 0..2*no_flows*k-1];

all_connections = array2d(1..2*no_flows*k+no_links, 1..2, in_connections ++ [arc[i,j] | i in k+1..no_links+k, j in 1..2] ++ out_connections);

total_flow = [flows[i,j] | i in 1..no_flows, j in 1..k] ++ 
	     comm_full ++ 
             [flows[i,j] | i in 1..no_flows, j in k+no_links+1..2*k+no_links];

total_unit_cost = [0 | i in 1..no_flows, j in 1..k] ++ [ 1 | i in 1..no_links] ++ [0 | i in 1..no_flows, j in 1..k];

total_balance = [0 | i in 1..k] ++ [balance[i,j] | i in 1..no_flows, j in k+1..k+1] ++ [balance[i,j] | i in 1..no_flows, j in k+2..k+2];

link_str = ["1 -> 2 = ", "1 -> 3 = ", "2 -> 1 = ", "2 -> 4 = ", "3 -> 1 = ", "3 -> 4 = ", "4 -> 2 = ", "4 -> 3 = "];
