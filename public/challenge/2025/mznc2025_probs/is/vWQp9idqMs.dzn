
domSetOfBlockInFunction = array1d(allBlocksInFunction, [{0},{1,8,0},{2,7,0},{3,0},{4,9,2,7,0},{5,12,4,9,2,7,0},{6,11,4,9,2,7,0},{7,0},{8,0},{9,2,7,0},{10,2,7,0},{11,4,9,2,7,0},{12,4,9,2,7,0}]);

execFrequencyOfBlockInFunction = array1d(allBlocksInFunction, [16384,8192,8192,16384,4096,1536,2560,16384,16384,8192,8192,4096,4096]);

defEdgesForBlockInFunction = array1d(allBlocksInFunction, [{},{22},{31},{10},{},{29},{30},{},{},{},{},{},{}]);

entryBlockOfFunction = 0;

funLocDomain = [|1, 1, 33, |0, 1, 33, |];

numBlocksInFunction = 13;

numDataInFunction = 35;

numOperationsInFunction = 43;

statesInFunction = [];

inBlock = [|10, 0, |11, 0, |12, 0, |13, 0, |14, 0, |52, 1, |53, 5, |54, 6, |55, 7, |56, 8, |57, 9, |58, 10, |59, 11, |60, 12, |61, 3, |];

inBlockSucc = [|1, 1, 3, |2, 5, 3, |3, 6, 3, |4, 7, 2, |5, 8, 1, |6, 9, 4, |7, 10, 3, |8, 11, 6, |9, 12, 5, |38, 0, 7, |39, 2, 9, |40, 4, 11, |41, 2, 10, |42, 4, 12, |43, 0, 8, |44, 4, 11, |46, 0, 7, |47, 2, 9, |48, 4, 11, |49, 0, 8, |50, 2, 10, |51, 4, 12, |];

locDomain = [|31, 27, 0, 31, |31, 15, 0, 31, |31, 7, 1, 31, |32, 27, 0, 31, |32, 15, 0, 31, |32, 7, 1, 31, |33, 12, 0, 31, |33, 28, 0, 31, |33, 8, 1, 31, |34, 13, 0, 31, |34, 21, 0, 31, |34, 3, 1, 31, |35, 11, 0, 31, |35, 14, 0, 31, |35, 9, 1, 31, |36, 17, 0, 31, |36, 23, 0, 31, |36, 5, 1, 31, |37, 16, 0, 31, |37, 25, 0, 31, |37, 6, 1, 31, |38, 2, locValueForNull, locValueForNull, |39, 5, locValueForNull, locValueForNull, |40, 6, locValueForNull, locValueForNull, |41, 5, locValueForNull, locValueForNull, |42, 6, locValueForNull, locValueForNull, |43, 2, locValueForNull, locValueForNull, |44, 6, locValueForNull, locValueForNull, |45, 13, 0, 31, |45, 3, 1, 31, |61, 32, 31, 31, |62, 0, 32, 32, |62, 11, 1, 31, |63, 0, 32, 32, |63, 12, 1, 31, |64, 0, 32, 32, |64, 13, 1, 31, |65, 1, 32, 32, |65, 14, 1, 31, |66, 1, 32, 32, |66, 15, 1, 31, |67, 1, 32, 32, |67, 16, 1, 31, |68, 1, 32, 32, |68, 17, 1, 31, |69, 1, 32, 32, |69, 18, 1, 31, |70, 3, 32, 32, |70, 22, 1, 31, |71, 7, 32, 32, |71, 28, 1, 31, |72, 8, 32, 32, |72, 29, 1, 31, |73, 9, 32, 32, |73, 30, 1, 31, |74, 10, 32, 32, |74, 32, 1, 31, |75, 0, 33, 33, |75, 11, 1, 31, |76, 0, 33, 33, |76, 12, 1, 31, |77, 0, 33, 33, |77, 13, 1, 31, |78, 1, 33, 33, |78, 14, 1, 31, |79, 1, 33, 33, |79, 15, 1, 31, |80, 1, 33, 33, |80, 16, 1, 31, |81, 1, 33, 33, |81, 17, 1, 31, |82, 1, 33, 33, |82, 18, 1, 31, |83, 3, 33, 33, |83, 22, 1, 31, |84, 7, 33, 33, |84, 28, 1, 31, |85, 8, 33, 33, |85, 29, 1, 31, |86, 9, 33, 33, |86, 30, 1, 31, |87, 10, 33, 33, |87, 32, 1, 31, |88, 0, 0, 31, |88, 11, 1, 31, |89, 0, 0, 31, |89, 12, 1, 31, |90, 0, 0, 31, |90, 13, 1, 31, |91, 1, 0, 31, |91, 14, 1, 31, |92, 1, 0, 31, |92, 15, 1, 31, |93, 1, 0, 31, |93, 16, 1, 31, |94, 1, 0, 31, |94, 17, 1, 31, |95, 1, 0, 31, |95, 18, 1, 31, |96, 3, 0, 31, |96, 22, 1, 31, |97, 7, 0, 31, |97, 28, 1, 31, |98, 8, 0, 31, |98, 29, 1, 31, |99, 9, 0, 31, |99, 30, 1, 31, |100, 10, 0, 31, |100, 32, 1, 31, |101, 25, 0, 0, |102, 27, 0, 0, |103, 31, 0, 0, |104, 19, 1, 31, |105, 21, 1, 31, |106, 23, 1, 31, |107, 25, 1, 31, |108, 27, 1, 31, |109, 31, 1, 31, |110, 19, 1, 31, |111, 21, 1, 31, |112, 23, 1, 31, |113, 25, 1, 31, |114, 27, 1, 31, |115, 31, 1, 31, |116, 17, 0, 31, |116, 5, 1, 31, |117, 16, 0, 31, |117, 6, 1, 31, |];

applyDefDomUseConstraintForMatch = array1d(allMatches, [false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true]);

codeSizeOfMatch = array1d(allMatches, [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,4,4,4,4,4,4,8,8,8,8,8,8,4,4]);

consumedBlocksInMatch = array1d(allMatches, [{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]);

dataDefinedByMatch = array1d(allMatches, [{10},{},{},{},{},{},{},{},{},{},{34},{33},{0},{1},{4},{20},{24},{26},{11},{12},{13},{14},{15},{16},{17},{18},{22},{28},{29},{30},{32},{7},{7},{8},{3},{9},{5},{6},{2,20},{5,24},{6,26},{5,24},{6,26},{2,20},{6,25,26},{3,21},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{11},{12},{13},{14},{15},{16},{17},{18},{22},{28},{29},{30},{32},{11},{12},{13},{14},{15},{16},{17},{18},{22},{28},{29},{30},{32},{11},{12},{13},{14},{15},{16},{17},{18},{22},{28},{29},{30},{32},{25},{27},{31},{19},{21},{23},{25},{27},{31},{19},{21},{23},{25},{27},{31},{5,23},{6,25}]);

dataUsedByMatch = array1d(allMatches, [{22,29},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{2},{5},{6},{0},{0},{0},{1},{1},{1},{1},{1},{3},{7},{8},{9},{10},{27,15},{27,15},{12,28},{13,21},{11,14},{17,23},{16,25},{18,19,2,20},{17,23,5,24},{16,25,6,26},{17,23,5,24},{16,25,6,26},{18,19,2,20},{16,34,6,25,26},{13,33,21},{20},{24},{26},{20},{24},{26},{},{},{},{},{},{},{},{},{},{32},{0},{0},{0},{1},{1},{1},{1},{1},{3},{7},{8},{9},{10},{0},{0},{0},{1},{1},{1},{1},{1},{3},{7},{8},{9},{10},{0},{0},{0},{1},{1},{1},{1},{1},{3},{7},{8},{9},{10},{34},{34},{34},{33},{33},{4},{34},{34},{34},{33},{33},{4},{34},{34},{34},{17,4,23},{16,34,25}]);

entryBlockOfMatch = array1d(allMatches, [{},{1},{5},{6},{7},{8},{9},{10},{11},{12},{0},{0},{0},{0},{0},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{0},{2},{4},{2},{4},{0},{4},{},{0},{2},{4},{0},{2},{4},{1},{5},{6},{7},{8},{9},{10},{11},{12},{3},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]);

latencyOfMatch = array1d(allMatches, [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,0,0]);

nonCopyMatches = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,116,117};

operationsCoveredByMatch = array1d(allMatches, [{7},{9},{12},{13},{37},{38},{39},{40},{41},{42},{},{},{},{},{},{24},{28},{30},{15},{16},{17},{18},{19},{20},{21},{22},{26},{32},{33},{34},{36},{4},{4},{5},{1},{6},{2},{3},{8,0,24},{10,2,28},{11,3,30},{10,2,28},{11,3,30},{8,0,24},{11,3,29,30},{1,25},{8},{10},{11},{8},{10},{11},{9},{12},{13},{37},{38},{39},{40},{41},{42},{14},{15},{16},{17},{18},{19},{20},{21},{22},{26},{32},{33},{34},{36},{15},{16},{17},{18},{19},{20},{21},{22},{26},{32},{33},{34},{36},{15},{16},{17},{18},{19},{20},{21},{22},{26},{32},{33},{34},{36},{29},{31},{35},{23},{25},{27},{29},{31},{35},{23},{25},{27},{29},{31},{35},{2,27},{3,29}]);

spannedBlocksInMatch = array1d(allMatches, [{},{1,3},{5,3},{6,3},{7,2},{8,1},{9,4},{10,3},{11,6},{12,5},{0},{0},{0},{0},{0},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{0,8,7},{2,10,9},{4,12,11},{2,10,9},{4,12,11},{0,8,7},{4,12,11},{},{0,8,7},{2,10,9},{4,12,11},{0,8,7},{2,10,9},{4,12,11},{1,3},{5,3},{6,3},{7,2},{8,1},{9,4},{10,3},{11,6},{12,5},{3},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]);

numLocations = 34;

numMatches = 118;

sameLoc = [|0, 22, 29, |0, 29, 10, |15, 2, 20, |16, 5, 24, |17, 6, 26, |18, 0, 11, |19, 0, 12, |20, 0, 13, |21, 1, 14, |22, 1, 15, |23, 1, 16, |24, 1, 17, |25, 1, 18, |26, 3, 22, |27, 7, 28, |28, 8, 29, |29, 9, 30, |30, 10, 32, |];

