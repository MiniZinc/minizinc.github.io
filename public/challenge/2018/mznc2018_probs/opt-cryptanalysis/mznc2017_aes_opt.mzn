include "globals.mzn";

int:R;
array [1..97, 1..9] of int : DDT=array2d (1..97,1..9, [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,2,0,0,0,1,0,1,1,1,2,0,0,0,1,1,0,0,1,2,0,0,0,1,1,1,0,1,2,0,0,1,0,0,0,1,1,3,0,0,1,0,0,1,0,1,2,0,0,1,0,0,1,1,0,3,0,0,1,0,1,0,1,0,3,0,0,1,0,1,1,0,0,3,0,0,1,0,1,1,0,1,3,0,0,1,0,1,1,1,0,3,0,0,1,1,0,0,0,1,3,0,0,1,1,0,0,1,1,3,0,0,1,1,0,1,0,0,3,0,0,1,1,0,1,1,0,2,0,0,1,1,0,1,1,1,3,0,0,1,1,1,0,1,0,3,0,0,1,1,1,0,1,1,3,0,1,0,0,0,1,0,1,2,0,1,0,0,0,1,1,0,3,0,1,0,0,0,1,1,1,3,0,1,0,0,1,0,0,1,3,0,1,0,0,1,0,1,0,3,0,1,0,0,1,1,0,0,3,0,1,0,0,1,1,1,0,3,0,1,0,1,0,0,0,1,3,0,1,0,1,0,1,0,0,3,0,1,0,1,1,0,0,1,3,0,1,0,1,1,0,1,0,3,0,1,0,1,1,0,1,1,3,0,1,0,1,1,1,0,0,2,0,1,0,1,1,1,0,1,3,0,1,1,0,0,0,1,0,3,0,1,1,0,0,1,1,0,3,0,1,1,0,1,0,0,0,3,0,1,1,0,1,0,1,1,2,0,1,1,0,1,1,0,0,3,0,1,1,0,1,1,1,1,2,0,1,1,1,0,0,0,1,2,0,1,1,1,0,0,1,0,3,0,1,1,1,0,1,1,0,3,0,1,1,1,1,0,0,0,3,0,1,1,1,1,1,0,0,3,0,1,1,1,1,1,1,1,2,1,0,0,0,0,0,1,1,3,1,0,0,0,0,1,1,1,3,1,0,0,0,1,0,0,1,3,1,0,0,0,1,0,1,1,2,1,0,0,0,1,1,0,1,3,1,0,0,0,1,1,1,1,2,1,0,0,1,0,0,1,0,3,1,0,0,1,0,1,0,0,2,1,0,0,1,0,1,1,0,3,1,0,0,1,1,0,0,0,3,1,0,0,1,1,1,0,0,3,1,0,0,1,1,1,1,0,2,1,0,1,0,0,0,1,0,3,1,0,1,0,0,0,1,1,3,1,0,1,0,0,1,0,1,2,1,0,1,0,1,0,0,0,3,1,0,1,0,1,0,1,0,3,1,0,1,0,1,1,0,1,3,1,0,1,0,1,1,1,0,3,1,0,1,1,0,0,0,1,3,1,0,1,1,0,1,0,0,3,1,0,1,1,1,0,0,0,2,1,0,1,1,1,0,0,1,3,1,0,1,1,1,0,1,0,3,1,0,1,1,1,0,1,1,3,1,0,1,1,1,1,0,1,3,1,1,0,0,0,0,1,0,3,1,1,0,0,0,1,0,1,2,1,1,0,0,0,1,1,1,3,1,1,0,0,1,0,0,0,3,1,1,0,0,1,0,0,1,3,1,1,0,0,1,0,1,0,3,1,1,0,0,1,1,1,0,3,1,1,0,1,0,0,0,1,3,1,1,0,1,0,0,1,0,2,1,1,0,1,0,0,1,1,3,1,1,0,1,0,1,0,0,3,1,1,0,1,0,1,1,1,3,1,1,0,1,1,0,1,0,3,1,1,0,1,1,0,1,1,3,1,1,1,0,0,0,1,0,3,1,1,1,0,0,0,1,1,3,1,1,1,0,0,1,1,0,3,1,1,1,0,0,1,1,1,3,1,1,1,0,1,0,0,0,3,1,1,1,0,1,0,0,1,3,1,1,1,0,1,1,0,0,3,1,1,1,0,1,1,0,1,3,1,1,1,1,0,0,0,1,2,1,1,1,1,0,1,0,0,2,1,1,1,1,1,1,1,0,2,1,1,1,1,1,1,1,1,2]);
int :bl=64;

array [0..63] of int : P = array1d(0..63,[0, 16, 32, 48, 1, 17, 33, 49, 2, 18, 34, 50, 3, 19, 35, 51, 
    		    4, 20, 36, 52, 5, 21, 37, 53, 6, 22, 38, 54, 7, 23, 39, 55,
    		    8, 24, 40, 56, 9, 25, 41, 57, 10, 26, 42, 58, 11, 27, 43, 59,
    		    12, 28, 44, 60, 13, 29, 45, 61, 14, 30, 46, 62, 15, 31, 47, 63]);
array [0..R, 0..bl-1] of var 0..1 : x;
array [0..R-1, 0..bl-1] of var 0..1 : xp;
array [0..16*R-1] of var {3,2,0}: prb;
var 1..bl: objective; 
%%%%Permutation
constraint forall (r in 0..R-1, j in 0..63) (
    xp[r,P[j]]=x[r,j]
);

%%%%SB
constraint forall (r in 0..R-1, j in 0..15) (
    table([xp[r,i+4*j] | i in 0..3] ++ [x[r+1,i+4*j] | i in 0..3] ++ [prb[16*r+j]], DDT) 
);

%%%%Obj
constraint objective=sum(i in 0..16*R-1) (prb[i]);

%%% Matsui like
constraint forall (i in 0..15) (prb[i] !=3);
constraint forall (i in (R-1)*16..R*16-1) (prb[i] !=3);


output [
    "x = array2d(0..\(R), 0..\(bl-1), \(x));\n",
    "xp = array2d(0..\(R-1), 0..\(bl-1), \(xp));\n",
    "prb = array1d(0..\(16*R-1), \(prb));\n",
    "objective = \(objective);\n",
];

ann: orig_search = int_search(
    [if i mod 2==0 then x[i div 2,j] else xp[i div 2,j] endif | i in 2..2*R-1, j in 0..63] 
++  [if i mod 2==0 then x[i div 2,j] else xp[i div 2,j] endif | i in 0..1, j in 0..63],
    most_constrained, indomain_min, complete);

ann: new_search = seq_search([
    int_search(
        [if i mod 2==0 then x[i div 2,j] else xp[i div 2,j] endif | i in 2..2*R-1, j in 0..63] 
    ++  [if i mod 2==0 then x[i div 2,j] else xp[i div 2,j] endif | i in 0..1, j in 0..63],
        input_order, indomain_min, complete),
    int_search(prb, smallest, indomain_min, complete)
]);

solve
    :: new_search
    minimize objective;

