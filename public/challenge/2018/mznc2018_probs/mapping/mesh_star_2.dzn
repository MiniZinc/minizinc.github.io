%% ========= DATA =============
% Artificial example inspired by MPEG decoder
%

% ___   ___   ___
% |1 |--|2 |--|3 |
% ---   ---   ---
%  | \   |  /  |
% ___   ___   ___
% |4 |--|5 |--|6 |
% ---   ---   ---
%  |  /  |  \  |
% ___   ___   ___
% |7 |--|8 |--|9 |
% ---   ---   ---

row = 3;
col = 3;

no_links = 2*2*(row*col-1);

no_actors = 13;
no_flows = 29;

link_bandwidth = 450;

source_destination_actor = 
			[| 3, 5 |
			   8, 7 |
			   9, 10 |
			   5, 13 |
			   6, 12 |
			   8, 6 |
			   13, 11 |
			   3, 5 |
			   7, 5 |
			   1, 3 |
			   13, 11 |
			   8, 7 |
			   8, 10 |
			   3, 4 |
			   4, 8 |
			   3, 12 |
			   3, 2 |
			   8, 9 |
			   8, 9 |
			   3, 4 |
			   11, 12 |
			   3, 8 |
			   10, 6 |
			   12, 2 |
			   3, 13 |
			   8, 9 |
			   12, 13 |
			   3, 4 |
			   3, 8 
			|];


actor_processor = [flow_processor[10], %1
		   flow_processor[53], % 2
		   flow_processor[1],  % 3
		   flow_processor[15], % 4
		   flow_processor[4],  % 5
		   flow_processor[5],  % 6
		   flow_processor[31], % 7
		   flow_processor[2],  % 8
		   flow_processor[3],  % 9
		   flow_processor[32], % 10
		   flow_processor[36], % 11
		   flow_processor[34], % 12
		   flow_processor[33], % 13
		   ];

inStream = [170, 570, 570, 160, 395, 10, 40, 11, 570, 24, 677, 20, 50, 29, 570, 17, 10, 66, 20, 47, 476, 17, 570, 713, 17, 10, 713, 40, 90];

b = [| 0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[1], -inStream[1] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[2], -inStream[2] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[3], -inStream[3] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[4], -inStream[4] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[5], -inStream[5] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[6], -inStream[6] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[7], -inStream[7] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[8], -inStream[8] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[9], -inStream[9] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[10], -inStream[10] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[11], -inStream[11] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[12], -inStream[12] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[13], -inStream[13] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[14], -inStream[14] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[15], -inStream[15] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[16], -inStream[16] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[17], -inStream[17] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[18], -inStream[18] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[19], -inStream[19] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[20], -inStream[20] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[21], -inStream[21] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[22], -inStream[22] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[23], -inStream[23] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[24], -inStream[24] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[25], -inStream[25] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[26], -inStream[26] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[27], -inStream[27] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[28], -inStream[28] |
       0, 0, 0, 0, 0, 0, 0, 0, 0, inStream[29], -inStream[29] 
       |];


flows = array2d(1..no_flows, 1..m, 
        [inFlow[1,i] | i in 1..k] ++ [commFlow[1,i] | i in 1..no_links] ++ [outFlow[1,i] | i in 1..k] ++
        [inFlow[2,i] | i in 1..k] ++ [commFlow[2,i] | i in 1..no_links] ++ [outFlow[2,i] | i in 1..k] ++
	[inFlow[3,i] | i in 1..k] ++ [commFlow[3,i] | i in 1..no_links] ++ [outFlow[3,i] | i in 1..k] ++
	[inFlow[4,i] | i in 1..k] ++ [commFlow[4,i] | i in 1..no_links] ++ [outFlow[4,i] | i in 1..k] ++
	[inFlow[5,i] | i in 1..k] ++ [commFlow[5,i] | i in 1..no_links] ++ [outFlow[5,i] | i in 1..k] ++
	[inFlow[6,i] | i in 1..k] ++ [commFlow[6,i] | i in 1..no_links] ++ [outFlow[6,i] | i in 1..k] ++
	[inFlow[7,i] | i in 1..k] ++ [commFlow[7,i] | i in 1..no_links] ++ [outFlow[7,i] | i in 1..k] ++
	[inFlow[8,i] | i in 1..k] ++ [commFlow[8,i] | i in 1..no_links] ++ [outFlow[8,i] | i in 1..k] ++
	[inFlow[9,i] | i in 1..k] ++ [commFlow[9,i] | i in 1..no_links] ++ [outFlow[9,i] | i in 1..k] ++
	[inFlow[10,i] | i in 1..k] ++ [commFlow[10,i] | i in 1..no_links] ++ [outFlow[10,i] | i in 1..k] ++
	[inFlow[11,i] | i in 1..k] ++ [commFlow[11,i] | i in 1..no_links] ++ [outFlow[11,i] | i in 1..k] ++
	[inFlow[12,i] | i in 1..k] ++ [commFlow[12,i] | i in 1..no_links] ++ [outFlow[12,i] | i in 1..k] ++
	[inFlow[13,i] | i in 1..k] ++ [commFlow[13,i] | i in 1..no_links] ++ [outFlow[13,i] | i in 1..k] ++
	[inFlow[14,i] | i in 1..k] ++ [commFlow[14,i] | i in 1..no_links] ++ [outFlow[14,i] | i in 1..k] ++
	[inFlow[15,i] | i in 1..k] ++ [commFlow[15,i] | i in 1..no_links] ++ [outFlow[15,i] | i in 1..k] ++
	[inFlow[16,i] | i in 1..k] ++ [commFlow[16,i] | i in 1..no_links] ++ [outFlow[16,i] | i in 1..k] ++
	[inFlow[17,i] | i in 1..k] ++ [commFlow[17,i] | i in 1..no_links] ++ [outFlow[17,i] | i in 1..k] ++
	[inFlow[18,i] | i in 1..k] ++ [commFlow[18,i] | i in 1..no_links] ++ [outFlow[18,i] | i in 1..k] ++
	[inFlow[19,i] | i in 1..k] ++ [commFlow[19,i] | i in 1..no_links] ++ [outFlow[19,i] | i in 1..k] ++
	[inFlow[20,i] | i in 1..k] ++ [commFlow[20,i] | i in 1..no_links] ++ [outFlow[20,i] | i in 1..k] ++
	[inFlow[21,i] | i in 1..k] ++ [commFlow[21,i] | i in 1..no_links] ++ [outFlow[21,i] | i in 1..k] ++
	[inFlow[22,i] | i in 1..k] ++ [commFlow[22,i] | i in 1..no_links] ++ [outFlow[22,i] | i in 1..k] ++
	[inFlow[23,i] | i in 1..k] ++ [commFlow[23,i] | i in 1..no_links] ++ [outFlow[23,i] | i in 1..k] ++
	[inFlow[24,i] | i in 1..k] ++ [commFlow[24,i] | i in 1..no_links] ++ [outFlow[24,i] | i in 1..k] ++
	[inFlow[25,i] | i in 1..k] ++ [commFlow[25,i] | i in 1..no_links] ++ [outFlow[25,i] | i in 1..k] ++
	[inFlow[26,i] | i in 1..k] ++ [commFlow[26,i] | i in 1..no_links] ++ [outFlow[26,i] | i in 1..k] ++
	[inFlow[27,i] | i in 1..k] ++ [commFlow[27,i] | i in 1..no_links] ++ [outFlow[27,i] | i in 1..k] ++
	[inFlow[28,i] | i in 1..k] ++ [commFlow[28,i] | i in 1..no_links] ++ [outFlow[28,i] | i in 1..k] ++
	[inFlow[29,i] | i in 1..k] ++ [commFlow[29,i] | i in 1..no_links] ++ [outFlow[29,i] | i in 1..k] 
	);

balance = array2d(1..no_flows, 1..n, [b[i,j] | i in 1..no_flows, j in 1..n]);

unit_cost = [ 0, 0, 0, 0, 0, 0, 0, 0, 0] ++
	    [1 | i in 1..no_links] ++
	    [0, 0, 0, 0, 0, 0, 0, 0, 0];

processor_load = 700;

% load for actors
actor_load = [16, 68, 116, 33, 15, 106, 27, 45, 29, 93, 67, 74, 99];

load = array2d(1..2, 1..no_flows, 
	[if (not exists (k in 1..i-1) (source_destination_actor[k,j+1] = source_destination_actor[i,j+1] \/ 
	    	 	      	       source_destination_actor[k,((j+1) mod 2) + 1] = source_destination_actor[i,j+1])) 
	    then actor_load[source_destination_actor[i,j+1]] else 0 endif | j in 0..1, i in 1..no_flows]);

arc =[| 
    	%% from action to processors
    	10, 1 |
    	10, 2 |
	10, 3 |
	10, 4 |
	10, 5 |
	10, 6 |
	10, 7 |
	10, 8 |
	10, 9 |

	1, 5 |
	1, 2 |
	1, 4 |

	2, 1 |
	2, 3 |
	2, 5 |

	3, 2 |
	3, 5 |
	3, 6 |

	4, 1 |
	4, 5 |
	4, 7 |

	5, 1 |
	5, 2 |
	5, 3 |
	5, 4 |
	5, 6 |
	5, 7 |
	5, 8 |
	5, 9 |
	
	6, 3 |
	6, 5 |
	6, 9 |

	7, 4 |
	7, 5 |
	7, 8 |

	8, 5 |
	8, 7 |
	8, 9 |

	9, 5 |
	9, 6 |
	9, 8 |
	
	%% from processors to action
	1, 11 |
    	2, 11 |
	3, 11 |
	4, 11 |
	5, 11 |
	6, 11 |
	7, 11 |
	8, 11 |
	9, 11 
	|];

in_connections = [if ((i mod 2) mod 2) = 0 then (k+1)+(i div (2*k)) else ((i div 2) mod k + 1) endif | i in 0..2*no_flows*k-1];
out_connections = [if ((i mod 2) mod 2) = 0 then ((i div 2) mod k + 1) else (k+no_flows+1)+(i div (2*k)) endif | i in 0..2*no_flows*k-1];

all_connections = array2d(1..2*no_flows*k+no_links, 1..2, in_connections ++ [arc[i,j] | i in k+1..no_links+k, j in 1..2] ++ out_connections);

total_flow = [flows[i,j] | i in 1..no_flows, j in 1..k] ++ comm_full ++ 
	     [flows[i,j] | i in 1..no_flows, j in k+no_links+1..2*k+no_links];

total_unit_cost = [0 | i in 1..no_flows, j in 1..k] ++ [ 1 | i in 1..no_links] ++ [0 | i in 1..no_flows, j in 1..k];

total_balance = [0 | i in 1..k] ++ [balance[i,j] | i in 1..no_flows, j in k+1..k+1] ++ [balance[i,j] | i in 1..no_flows, j in k+2..k+2];

link_str = ["1 -> 5 = ",
	"1 -> 2 = ",
	"1 -> 4 = ",
	"2 -> 1 = ",
	"2 -> 3 = ",
	"2 -> 5 = ",
	"3 -> 2 = ",
	"3 -> 5 = ",
	"3 -> 6 = ",
	"4 -> 1 = ",
	"4 -> 5 = ",
	"4 -> 7 = ",
	"5 -> 1 = ",
	"5 -> 2 = ",
	"5 -> 3 = ",
	"5 -> 4 = ",
	"5 -> 6 = ",
	"5 -> 7 = ",
	"5 -> 8 = ",
	"5 -> 9 = ",
	"6 -> 3 = ",
	"6 -> 5 = ",
	"6 -> 9 = ",
	"7 -> 4 = ",
	"7 -> 5 = ",
	"7 -> 8 = ",
	"8 -> 5 = ",
	"8 -> 7 = ",
	"8 -> 9 = ",
	"9 -> 5 = ",
	"9 -> 6 = ",
	"9 -> 8 = "];
