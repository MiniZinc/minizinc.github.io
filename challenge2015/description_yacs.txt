YACS is yet another constraint solver.

YACS combines local search with restarting, global constraints, and
hierarchical cost functions.

YACS currently implements simulated annealing.

YACS currently supports boolean, integer, and integer
set variables. 

YACS currently features the following global constraints: alldifferent,
alldifferent_except_0, atmost, atleast, count_*, cumulative, element,
exactly, inverse, maximum, minimum, nvalue, regular, sum, table

YACS can be used as a library or via its FlatZinc frontend.

YACS is written in Scala and exploits the Scala library's immutable
collection classes in its implementation of global constraints for local
search.

YACS is a project by Michael Marte (see
https://de.linkedin.com/pub/michael-marte/6/353/b21).
The author is currently working as a test architect for TomTom but
this position is in no way related to the YACS project.

YACS currently is a one-man show but the future development model is
as yet undecided. Feel free to contact the author if you are
potentially interested in contributing. There is a lot to do;
implementing local search properly (flexible and scalable) gives rise
to many challenges. For example, ever thought about how to compute the
effects of a given move on a given diffn_k constraint in an efficient
way?
