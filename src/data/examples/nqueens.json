{
  "name": "N Queens",
  "project": {
    "files": [
      {
        "name": "nqueens.mzn",
        "contents": "include \"all_different.mzn\";\n\nint: n = 8;\narray [1..n] of var 1..n: q; % queen in column i is in row q[i]\n\nconstraint all_different(q);                      % distinct rows\nconstraint all_different([q[i] + i | i in 1..n]); % distinct diagonals\nconstraint all_different([q[i] - i | i in 1..n]); % upwards+downwards\n\ninclude \"visualise.mzn\";\n"
      },
      {
        "name": "visualise.mzn",
        "contents": "include \"ide/vis.mzn\";\noutput :: vis_server(\"nqueens.html\", n) [i - 1 | i in q];\n",
        "hidden": true,
        "readOnly": true
      },
      {
        "name": "nqueens.html",
        "contents": "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"/minizinc-ide.js\"></script>\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n  <link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans&display=swap\" rel=\"stylesheet\">\n  <style>\n    #board {\n      border: solid 1px #29221d;\n      width: min-content;\n      font-family: 'Noto Sans', sans-serif;\n    }\n\n    .row {\n      display: flex;\n    }\n\n    .cell {\n      width: 40px;\n      height: 40px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      font-size: 40px;\n      background-color: #ede2cc;\n      color: #29221d;\n    }\n\n    .queen::after {\n      content: '♛';\n      cursor: pointer;\n    }\n\n    .queen:not(.selected):hover {\n      color: #053275;\n    }\n\n    .selected {\n      color: #a30d0d;\n    }\n\n    .e-w:not(.queen)::after {\n      content: '┄';\n    }\n\n    .n-s:not(.queen)::after {\n      content: '┆';\n    }\n\n    .ne-sw:not(.queen)::after {\n      content: '╱';\n    }\n\n    .nw-se:not(.queen)::after {\n      content: '╲';\n    }\n\n    .dark {\n      background-color: #8c7556;\n    }\n  </style>\n</head>\n\n<body>\n  <div id=\"board\"></div>\n  <script>\n    (async function () {\n      const n = await MiniZincIDE.getUserData();\n      const board = document.getElementById('board');\n      const cells = [];\n      let dark = false;\n      let selected = -1;\n      for (let i = 0; i < n; i++) {\n        const row = document.createElement('div');\n        row.classList.add('row');\n        const rowCells = [];\n        for (let j = 0; j < n; j++) {\n          const cell = document.createElement('div');\n          cell.addEventListener('click', () => {\n            if (cell.classList.contains('queen')) {\n              selected = i;\n            } else {\n              selected = -1;\n            }\n            updateSelected();\n          });\n          cell.classList.add('cell');\n          if (dark) {\n            cell.classList.add('dark');\n          }\n          dark = !dark;\n          rowCells.push(cell);\n          row.appendChild(cell);\n        }\n        board.appendChild(row);\n        cells.push(rowCells);\n        if (n % 2 === 0) {\n          dark = !dark;\n        }\n      }\n\n      function updateSelected() {\n        for (let i = 0; i < n; i++) {\n          for (let j = 0; j < n; j++) {\n            cells[i][j].classList.remove('selected');\n            cells[i][j].classList.remove('e-w');\n            cells[i][j].classList.remove('n-s');\n            cells[i][j].classList.remove('ne-sw');\n            cells[i][j].classList.remove('nw-se');\n          }\n        }\n        if (selected !== -1) {\n          let row = -1;\n          for (let j = 0; j < n; j++) {\n            if (cells[selected][j].classList.contains('queen')) {\n              row = j;\n              break;\n            }\n          }\n          if (row !== -1) {\n            for (let i = 0; i < n; i++) {\n              for (let j = 0; j < n; j++) {\n                if (i == selected) {\n                  cells[i][j].classList.add('selected');\n                  cells[i][j].classList.add('e-w');\n                }\n                if (j == row) {\n                  cells[i][j].classList.add('selected');\n                  cells[i][j].classList.add('n-s');\n                }\n                if (i + j === selected + row) {\n                  cells[i][j].classList.add('selected');\n                  cells[i][j].classList.add('ne-sw');\n                }\n                if (i - j === selected - row) {\n                  cells[i][j].classList.add('selected');\n                  cells[i][j].classList.add('nw-se');\n                }\n              }\n            }\n          }\n        }\n      }\n\n      function setSolution(data) {\n        for (let i = 0; i < n; i++) {\n          for (let j = 0; j < n; j++) {\n            if (data[j] === i) {\n              cells[i][j].classList.add('queen');\n            } else {\n              cells[i][j].classList.remove('queen');\n            }\n          }\n        }\n        updateSelected();\n      }\n\n      // Visualise last solution on startup\n      const numSols = await MiniZincIDE.getNumSolutions();\n      if (numSols > 0) {\n        const solution = await MiniZincIDE.getSolution(numSols - 1);\n        setSolution(solution.data);\n      }\n\n      // Show new solutions if we're following the latest solution\n      let followLatest = true;\n      MiniZincIDE.on('solution', (solution) => {\n        if (followLatest) {\n          setSolution(solution.data);\n        }\n      });\n\n      MiniZincIDE.on('goToSolution', async (index) => {\n        // Requesting index -1 turns on following latest solution\n        // Otherwise, we stop showing the latest solution and show the requested one\n        followLatest = index === -1;\n        const solution = await MiniZincIDE.getSolution(index);\n        setSolution(solution.data);\n      });\n    })();\n  </script>\n</body>\n\n</html>",
        "hidden": true,
        "readOnly": true
      }
    ],
    "tab": 0,
    "solverId": "org.minizinc.gecode_presolver",
    "solverConfig": {
      "enableTimeLimit": false,
      "timeLimit": 1,
      "allSolutions": false,
      "verboseCompilation": false,
      "verboseSolving": false,
      "compilerStatistics": false,
      "solvingStatistics": false,
      "outputTime": false,
      "freeSearch": false
    },
    "minizincVersion": "latest"
  }
}
