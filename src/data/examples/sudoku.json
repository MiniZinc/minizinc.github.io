{
  "name": "Sudoku",
  "project": {
    "files": [
      {
        "name": "sudoku.mzn",
        "contents": "include \"globals.mzn\";\n\nany: board = [|\n   5,  3, <>,  <>,  7, <>,  <>, <>, <> |\n   6, <>, <>,   1,  9,  5,  <>, <>, <> |\n  <>,  9,  8,  <>, <>, <>,  <>,  6, <> |\n \n   8, <>, <>,  <>,  6, <>,  <>, <>,  3 |\n   4, <>, <>,   8, <>,  3,  <>, <>,  1 |\n   7, <>, <>,  <>,  2, <>,  <>, <>,  6 |\n\n  <>,  6, <>,  <>, <>, <>,   2,  8, <> |\n  <>, <>, <>,   4,  1,  9,  <>, <>,  5 |\n  <>, <>, <>,  <>,  8, <>,  <>,  7,  9\n|];\n\narray [1..9, 1..9] of var 1..9: solution;\n\n% Given numbers are fixed\nconstraint forall (i, j in 1..9) (solution[i, j] ~= board[i, j]);\n\n% Rows are all different\nconstraint forall (i in 1..9) (all_different(solution[i, ..]));\n% Columns are all different\nconstraint forall (j in 1..9) (all_different(solution[.., j]));\n\n% Subgrids are all different\nconstraint forall (i, j in 1..3) (\n  all_different(solution[\n    3 * (i - 1) + 1 .. 3 * i,\n    3 * (j - 1) + 1 .. 3 * j\n  ])\n);\n\ninclude \"visualise.mzn\";\n"
      },
      {
        "name": "visualise.mzn",
        "contents": "include \"ide/vis.mzn\";\noutput :: vis_server(\"sudoku.html\", board) solution;\n",
        "hidden": true,
        "readOnly": true
      },
      {
        "name": "sudoku.html",
        "contents": "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"/minizinc-ide.js\"></script>\n  <style>\n    html,\n    body {\n      font-family: 'Helvetica', sans-serif;\n    }\n\n    #board {\n      border: solid 1px #000;\n      width: min-content;\n    }\n\n    .cell {\n      width: 2rem;\n      height: 2rem;\n      border: solid 1px #000;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: red;\n    }\n\n    .cell.fixed {\n      color: black;\n    }\n\n    .cell:nth-child(3n) {\n      border-right: solid 2px #000;\n    }\n\n    .row {\n      display: flex;\n      width: min-content;\n    }\n\n    .row:nth-child(3n) {\n      border-bottom: solid 1px #000;\n    }\n  </style>\n</head>\n\n<body>\n  <div id=\"board\">\n  </div>\n  <script>\n    (async function () {\n      const fixed = await MiniZincIDE.getUserData();\n      const board = document.getElementById('board');\n      const rows = [];\n      for (const fixedRow of fixed) {\n        const row = [];\n        const rowElem = document.createElement('div');\n        rowElem.classList.add('row');\n        for (const fixedCell of fixedRow) {\n          const cell = document.createElement('div');\n          cell.classList.add('cell');\n          if (fixedCell !== null) {\n            cell.textContent = fixedCell;\n            cell.classList.add('fixed')\n          }\n          row.push(cell);\n          rowElem.appendChild(cell);\n        }\n        rows.push(row);\n        board.appendChild(rowElem);\n      }\n\n      function setSolution(data) {\n        for (let i = 0; i < 9; i++) {\n          for (let j = 0; j < 9; j++) {\n            rows[i][j].textContent = data[i][j];\n          }\n        }\n      }\n\n      // Visualise last solution on startup\n      const numSols = await MiniZincIDE.getNumSolutions();\n      if (numSols > 0) {\n        const solution = await MiniZincIDE.getSolution(numSols - 1);\n        setSolution(solution.data);\n      }\n\n      // Show new solutions if we're following the latest solution\n      let followLatest = true;\n      MiniZincIDE.on('solution', (solution) => {\n        if (followLatest) {\n          setSolution(solution.data);\n        }\n      });\n\n      MiniZincIDE.on('goToSolution', async (index) => {\n        // Requesting index -1 turns on following latest solution\n        // Otherwise, we stop showing the latest solution and show the requested one\n        followLatest = index === -1;\n        const solution = await MiniZincIDE.getSolution(index);\n        setSolution(solution.data);\n      });\n    })();\n  </script>\n</body>\n\n</html>",
        "hidden": true,
        "readOnly": true
      }
    ],
    "tab": 0,
    "solverId": "org.minizinc.gecode_presolver",
    "solverConfig": {
      "enableTimeLimit": false,
      "timeLimit": 1,
      "allSolutions": false,
      "verboseCompilation": false,
      "verboseSolving": false,
      "compilerStatistics": false,
      "solvingStatistics": false,
      "outputTime": false,
      "freeSearch": false
    },
    "minizincVersion": "latest"
  }
}
