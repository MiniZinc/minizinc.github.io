{
  "name": "Map colouring",
  "project": {
    "files": [
      {
        "name": "australia.mzn",
        "contents": "enum REGION = { WA, NT, SA, Q, NSW, V, T };\nenum COLOR = Color(1..card(REGION));\n\n% Neighboring regions\narray [_] of tuple(REGION, REGION): neighbors = [\n  (WA,  NT),\n  (WA,  SA),\n  (NT,  SA),\n  (NT,  Q),\n  (SA,  Q),\n  (SA,  NSW),\n  (SA,  V),\n  (Q,   NSW),\n  (NSW, V)\n];\n\n% Color of each Region\narray [REGION] of var COLOR: color;\n% Number of colors used\ninclude \"nvalue_fn.mzn\";\nvar 1..card(COLOR): n_colors :: output = nvalue(color);\n\n% Neighboring regions have different colours\nconstraint forall (pair in neighbors) (color[pair.1] != color[pair.2]);\n\n% Use as few colors as possible\nsolve minimize n_colors;\n\ninclude \"visualise.mzn\";\n"
      },
      {
        "name": "visualise.mzn",
        "contents": "include \"ide/vis.mzn\";\n\noutput :: vis_server(\"australia.html\", (\n  regions: [show(r) | r in REGION],\n  colors: [show(c) | c in COLOR]\n)) [show(c) | c in color];\n",
        "hidden": true,
        "readOnly": true
      },
      {
        "name": "australia.html",
        "contents": "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>Australia Visualisation</title>\n  <script src=\"/minizinc-ide.js\"></script>\n  <style>\n    html,\n    body {\n      margin: 0;\n      padding: 0;\n      overflow: hidden;\n      background: transparent;\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    main {\n      width: 100vw;\n      height: 100vh;\n      padding: 50px;\n    }\n\n    svg {\n      width: 100%;\n      height: 100%;\n    }\n\n    .shapes {\n      fill: none;\n      stroke: #000;\n      stroke-linejoin: round;\n      stroke-linecap: round;\n      stroke-width: 1;\n    }\n\n    .labels {\n      font-family: sans-serif;\n      font-size: 16px;\n      text-anchor: middle;\n      fill: #000;\n    }\n  </style>\n</head>\n\n<body>\n  <main>\n    <svg viewBox=\"0 0 412 357.33\">\n      <g class=\"shapes\">\n        <path id=\"wa\"\n          d=\"m152 67.333v-6l-18-18-24 6-24 30-78 36-6 12v18l12 24 12 60-12 18 24 12h24l30-18h30l29.68-8.72z\" />\n        <path id=\"nt\" d=\"m152 67.333 6-12 18-24h66l-6 24 12 30 6 2.72v81.28h-102v-102\" />\n        <path id=\"q\"\n          d=\"m254 88.053 24 9.28h12l6-48 12-48 36 78 42 42 18 24 6 42-3.6 10.8h-1.2l-3.6-1.2-3.6-2.4-3.6 1.2-8.4-2.4h-108v-24h-24v-81.28\" />\n        <path id=\"nsw\"\n          d=\"m406.4 198.13-8.4 31.2-12 6-18 48-20.4-4.8-9.6-8.4-6 2.4-14.4-3.6-8.4-6-14.4-3.6-16.8-8.4v-57.6h108l8.4 2.4 3.6-1.2 3.6 2.4 3.6 1.2z\" />\n        <path id=\"v\"\n          d=\"m368 283.33-20.4-4.8-9.6-8.4-6 2.4-14.4-3.6-8.4-6-14.4-3.6-16.8-8.4v40.8l24 9.6 12-6 18 6 18-12z\" />\n        <path id=\"sa\" d=\"m278 169.33h-126l-0.32 63.28 12.32-3.28h36l24 30 18-24v13.2l-6 22.8h24l12 18 6 2.4v-122.4\" />\n        <path id=\"t\" d=\"m320 319.33 12 6h6l9.6-6.32 8.4 6-2.08 18.64-15.92 11.68-18-12-6-12 6-12\" />\n      </g>\n      <g class=\"labels\">\n        <text x=\"83.533119\" y=\"170.0192\">WA</text>\n        <text x=\"201.66409\" y=\"123.36276\">NT</text>\n        <text x=\"328.74969\" y=\"147.87715\">Q</text>\n        <text x=\"334.34839\" y=\"237.23608\">NSW</text>\n        <text x=\"314.19815\" y=\"289.03265\">V</text>\n        <text x=\"336.71103\" y=\"344.3877\">T</text>\n        <text x=\"213.65285\" y=\"209.55853\">SA</text>\n      </g>\n    </svg>\n  </main>\n  <script>\n    const HTML_COLORS = ['#ff5959', '#ffe44d', '#9cc2ff', '#cfff82', '#ff99fc', '#a6fff2', '#ffcdb0'];\n\n    (async function () {\n      // getUserData can be used to retrieve the JSON data passed to ide_launch_server()\n      const userData = await MiniZincIDE.getUserData();\n      // Get element for each REGION\n      const regions = userData.regions.map(r => document.getElementById(r.toLowerCase()));\n      // Create a mapping between COLOR enum name and HTML color\n      const colors = {};\n      userData.colors.forEach((c, i) => {\n        colors[c] = HTML_COLORS[i % HTML_COLORS.length]\n      });\n\n      // Handler to set the colors for the solution\n      function setSolution(data) {\n        data.forEach((c, i) => {\n          regions[i].setAttribute('fill', colors[c]);\n        });\n      }\n\n      // Visualise last solution on startup\n      const numSols = await MiniZincIDE.getNumSolutions();\n      if (numSols > 0) {\n        const solution = await MiniZincIDE.getSolution(numSols - 1);\n        setSolution(solution.data);\n      }\n\n      // Show new solutions if we're following the latest solution\n      let followLatest = true;\n      MiniZincIDE.on('solution', (solution) => {\n        if (followLatest) {\n          setSolution(solution.data);\n        }\n      });\n\n      MiniZincIDE.on('goToSolution', async (index) => {\n        // Requesting index -1 turns on following latest solution\n        // Otherwise, we stop showing the latest solution and show the requested one\n        followLatest = index === -1;\n        const solution = await MiniZincIDE.getSolution(index);\n        setSolution(solution.data);\n      })\n    })();\n  </script>\n</body>\n\n</html>",
        "hidden": true,
        "readOnly": true
      }
    ],
    "tab": 0,
    "solverId": "org.minizinc.gecode_presolver",
    "solverConfig": {
      "enableTimeLimit": false,
      "timeLimit": 1,
      "allSolutions": false,
      "verboseCompilation": false,
      "verboseSolving": false,
      "compilerStatistics": false,
      "solvingStatistics": false,
      "outputTime": false,
      "freeSearch": false
    },
    "minizincVersion": "latest"
  }
}
